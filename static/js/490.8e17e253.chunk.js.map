{"version":3,"file":"static/js/490.8e17e253.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","redux/selectors.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import React from 'react';\nimport { Dna } from 'react-loader-spinner';\n\nconst Loader = ({ loading }) => {\n  return (\n    <div className=\"loader\">\n      <Dna color=\"#3f51b5\" size={50} loading={loading} />\n    </div>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\n\nexport const ContactStyle = styled.li`\ndisplay: flex;\njustify-content: space-between;\ngap: 5px;\npadding: 5px;`\n\nexport const BtnDelete = styled.button`\nheight: 20px;\nwidth: 60px;\nalign-self: flex-end;\ncolor: #000;\ntext-transform: capitalize;\nborder: none;\nborder-radius: 14px;\nbackground-color: #DB7093;\nfont-size: 10px;\ncursor: pointer;\nbox-shadow: 4px 4px 6px 0px rgba(66, 68, 90, 1);\n\n&:hover {\n  background-image: linear-gradient(to right, #ddd6f3 0%, #faaca8 51%, #ddd6f3 100%);\n}\n}`\n","import PropTypes from 'prop-types';\nimport { ContactStyle, BtnDelete } from './ContactItem.styled';\nimport { RiDeleteBin6Line } from 'react-icons/ri';\n\nconst ContactItem = ({ contact, onDelete }) => {\n  const { id, name, phone } = contact;\n\n  return (\n    <ContactStyle>\n      {name}: {phone}\n      <BtnDelete type=\"button\" onClick={() => onDelete(id)}>\n        <RiDeleteBin6Line\n          style={{ width: '16px', height: '16px', fill: 'white' }}\n        />\n      </BtnDelete>\n    </ContactStyle>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","export const getContacts = state => state.contacts.contactsArr;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter.status;","import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\ndisplay: flex;\n  justify-content: space-evenly;\n width: 500px;\n  height: auto;\n  border-radius: 10px;\n  flex-direction: column;\n  gap: 5px;\n  padding: 15px;\n  font-size: 16px;\n  background: #cfd9df;\n  box-shadow: 4px 4px 6px 0px rgba(66, 68, 90, 1);`","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { deleteContact } from 'redux/operations';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { Contacts } from './ContactList.styled';\n\nconst ContactList = () => {\n  const contactsState = useSelector(getContacts);\n  const filterState = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  function getVisibleContacts() {\n    const normalizedFilter = filterState?.toLowerCase() || '';\n    return contactsState.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <Contacts>\n      {getVisibleContacts().map(contact => (\n        <ContactItem\n          key={contact.id}\n          contact={contact}\n          onDelete={handleDelete}\n        />\n      ))}\n    </Contacts>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  width: 250px;\n  height: 30px;\n  color: #000;\n  background: #cfd9df;\n border-color: #C9CCD3;\n font-size: 18px;\n  border-radius: 5px;\n`;","import React from 'react';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setStatusFilter } from 'redux/filtersSlice';\nimport { getFilter } from 'redux/selectors';\nimport { Input } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter)?.value || '';\n  const [inputValue, setInputValue] = useState(filter || '');\n\n  const handleChange = event => {\n    const value = event.target.value.toLowerCase();\n    setInputValue(value);\n    dispatch(setStatusFilter(value));\n  };\n\n  return (\n    <label>\n      <Input\n        type=\"text\"\n        placeholder=\"Please enter name\"\n        value={inputValue}\n        onChange={handleChange}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormBox = styled(Form)`\n  display: flex;\n  justify-content: space-around;\n  width: 350px;\n  padding: 40px;\n  margin-bottom: 15px;\n  border-radius: 10px;\n  flex-direction: column;\n  gap: 15px;\n  padding: 15px;\n  font-size: 20px;\n  background: #cfd9df;\n  box-shadow: 4px 4px 6px 0px rgba(66, 68, 90, 1);\n`;\n\nexport const Input = styled(Field)`\n  width: 250px;\n  height: 30px;\n  color: #000;\n  background: #cfd9df;\n  border-color: #c9ccd3;\n  font-size: 16px;\n  border-radius: 5px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n\n  justify-content: space-between;\n  margin-bottom: 15px;\n`;\n\nexport const ErrorMess = styled(ErrorMessage)`\n  display: flex;\n  justify-content: center;\n  color: red;\n  font-size: 12px;\n  margin-bottom: 5px;\n`;\n\nexport const BtnForm = styled.button`\n// height: 50px;\nwidth: 150px;\nalign-self: center;\ncolor: #fff;\ntext-transform: capitalize;\nborder: none;\nborder-radius: 10px;\nbackground-color: #50C9C3;\nfont-size: 16px;\ncursor: pointer;\nbox-shadow: 4px 4px 6px 0px rgba(66, 68, 90, 1);\n\n&:hover {\n  background-image: linear-gradient(to right, #50C9C3 0%, #96DEDA 51%, #50C9C3 100%);\n}`;\n","// import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { getContacts } from 'redux/selectors';\nimport {\n  FormBox,\n  Input,\n  Label,\n  BtnForm,\n  ErrorMess,\n} from './ContactForm.styled';\n\nconst nameRegExp = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst  numberRegExp =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().min(3).matches(nameRegExp, 'Enter valid name').required(),\n  number: Yup.string().matches( numberRegExp, 'Enter valid  number').required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n    const isContactExist = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isContactExist) {\n      alert(`${name} is already in contacts`);\n      resetForm();\n      return;\n    }\n\n    dispatch(addContact({ name: name, number: number }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <FormBox autoComplete=\"off\">\n        <Label htmlFor=\"name\">\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMess name=\"name\" component={ErrorMess} />\n        </Label>\n        <Label htmlFor=\"number\">\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <ErrorMess name=\"number\" component=\"div\" />\n        <BtnForm type=\"submit\">Add contact</BtnForm>\n      </FormBox>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func,\n// };\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 600px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 35px;\n  padding: 50px;\n//   background-image: linear-gradient(to top, #00c6fb 0%, #005bea 100%);\n`;\n\nexport const Title = styled.h1`\n  font-family: 'Oxygen', sans-serif;\n  color: #f5f5f5;\n  font-size: 30px;\n  text-transform: uppercase;\n`;\n\nexport const SecondTitle = styled.h2`\n  font-family: 'Oxygen', sans-serif;\n  color: #f5f5f5;\n  font-size: 24px;\n`;\n\n// export const Contacts = styled.ul`\n// display: flex;\n//   justify-content: space-evenly;\n//  width: 500px;\n//   height: auto;\n//   border-radius: 10px;\n//   flex-direction: column;\n//   gap: 5px;\n//   padding: 15px;\n//   font-size: 16px;\n//   background: #cfd9df;\n//   box-shadow: 4px 4px 6px 0px rgba(66, 68, 90, 1);`","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport { fetchContact } from 'redux/operations';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { getIsLoading, getError } from 'redux/selectors';\nimport { Container, Title, SecondTitle } from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContact());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Title>Your phonebook</Title>\n      <ContactForm />\n      <SecondTitle>Contacts</SecondTitle>\n      <Filter />\n      {isLoading && !error && <Loader />}\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n\n"],"names":["loading","className","color","size","ContactStyle","styled","BtnDelete","contact","onDelete","id","name","phone","type","onClick","style","width","height","fill","getContacts","state","contacts","contactsArr","getIsLoading","isLoading","getError","error","getFilter","filter","status","Contacts","contactsState","useSelector","filterState","dispatch","useDispatch","handleDelete","deleteContact","normalizedFilter","toLowerCase","includes","getVisibleContacts","map","Input","value","useState","inputValue","setInputValue","placeholder","onChange","event","target","setStatusFilter","FormBox","Form","Field","Label","ErrorMess","ErrorMessage","BtnForm","validationSchema","Yup","shape","min","matches","required","number","initialValues","onSubmit","values","resetForm","some","alert","addContact","autoComplete","htmlFor","title","component","Container","Title","SecondTitle","useEffect","fetchContact"],"sourceRoot":""}